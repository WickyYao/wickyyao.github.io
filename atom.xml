<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://blog.wickyyao.com/atom.xml" rel="self"/>
  <link href="http://blog.wickyyao.com/"/>
  <updated>2015-08-27T20:45:22+08:00</updated>
  <id>http://blog.wickyyao.com/</id>
  <author>
    <name><![CDATA[Wicky]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTDP(1) - Brief Introduction to HTDP]]></title>
    <link href="http://blog.wickyyao.com/blog/2015/08/27/htdp-1-brief-introduction-to-htdp/"/>
    <updated>2015-08-27T19:32:37+08:00</updated>
    <id>http://blog.wickyyao.com/blog/2015/08/27/htdp-1-brief-introduction-to-htdp</id>
    <content type="html"><![CDATA[<p>很早就想读读被捧为圣经的<a href="https://mitpress.mit.edu/sicp/">SICP</a>，看了部分评论大多数都说不是太好理解，表示看了几遍还是云里雾里的。那我就果断退而求其次决定先阅读一遍<a href="http://www.htdp.org/">HTDP</a>，它比SICP更为基础，step by step 的讲解方式也更能让人清楚的理解含义，并且全文配合讲解的语言和SICP一样也是Scheme，看完这本之后再看SICP应该能更为顺利和透彻。</p>

<p>那先大概讲一下HTDP这本书会讲解些什么吧</p>

<h3>为什么</h3>

<p>为什么要读这本书？这一定是每一个人都会提到的问题。值不值？值！这简直是一定的，整本书不是通过很多exampe code教你某个特定语言（虽然它以Scheme作为讲解语言），而是教你编程模式，设计语言的方式，解决问题的途径与步骤，这是每个程序员最重要的东西。它能教会你：</p>

<ul>
<li>设计程序中涉及的初步代数以及几何学的知识</li>
<li>分析读与写的技能</li>
</ul>


<p>总会时不时听到别人说“学什么语言并不重要，重要的是编程思想”，我想HTDP教的就是这个思想，这将是无价并不可多得的财富。</p>

<p>整本书将会围绕如何设计好程序来展开，一般程序设计的步骤有以下组成：</p>

<ul>
<li>问题分析</li>
<li>定义目的</li>
<li>举出程序样例</li>
<li>制定程序框架</li>
<li>定义程序</li>
<li>测试</li>
</ul>


<p>而想要能很好的设计一个程序，往往需要遵循以下几点：</p>

<ul>
<li>分析问题声明</li>
<li>通过样例来剥离表达出问题本质</li>
<li>基于以上的分析制定程序框架和计划</li>
<li>评估希望得到的结果</li>
<li>通过测试修改程序</li>
</ul>


<p>那么如果你不是程序猿有没有必要读这本书呢？答案也是一定的。在现在这个飞速发展的时代，无论是什么职业，投资分析师也好，设计师也好，工作与生活中碰到的问题其实都可以以程序的逻辑方式去一一化解，因此分析问题和快速有效解决问题的能力也显得格外重要，它能帮你在工作生活中助力不少。</p>

<h3>章节内容</h3>

<p>这里大概说一下各章节的基本内容</p>

<h5>固定大小的数据</h5>

<p>介绍最基本的程序设计机制以及计算的核心理念。从Scheme最基本的数字、字符、图片等开始介绍方程和程序，并会展开到数据的间隔、列举、分项、结构和以上各种结合的领域之中</p>

<h5>任意的大数据</h5>

<p>它是固定大小数据的延伸，由于程序处理的数据可能是一些数字、字符串等（称为固定大小的数据）的组合，这章节便是告诉我们如何处理此类数据的</p>

<h5>抽象概念</h5>

<p>世界上没有一个程序语言会迫使我们写一些重复的代码，相反的，好的程序语言可以提供很好的机制来帮助我们统一处理这种重复代码。计算机科学家称这为“抽象”，它能大大提高程序员的编程效率。这章节就是讲如何创建和使用这些抽象的</p>

<h5>交织的数据</h5>

<p>介绍了设计概念中的迭代优化</p>

<h5>生成递归</h5>

<p>虽然结构化的设计以及抽象足以解决大多数的问题，但往往会走向效率不高的境地。换句话说吧，结构化的设计可能会使用太多的时间和内存去得到希望的结果。这章节就介绍了如何处理这些矛盾的</p>

<h5>累加器</h5>

<p>简单的说，累加器就是给方程添加了“内存”，它极大的提升了结构化设计的效率</p>

<p>好了，大概也介绍的差不多了，让我们赶紧开启这次旅程吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://blog.wickyyao.com/blog/2015/08/25/hello-octopress/"/>
    <updated>2015-08-25T12:48:28+08:00</updated>
    <id>http://blog.wickyyao.com/blog/2015/08/25/hello-octopress</id>
    <content type="html"><![CDATA[<p>其实很早之前我就想写一个自己的博客来记录我看到或学到的点点滴滴，可患有晚期懒癌的我迟迟都没有行动起来。是时候迈出第一步了，相信任何事情开头总是最难的，之后也便是顺水推舟的事情了。</p>

<p>之前使用过<a href="https://www.blogger.com">Blogspot</a>，但是被GFW墙了，还是决定自己搭建一个比较方便，恰好在网上看到<a href="http://octopress.org/">Octopress</a>，感觉一下子就被它多简洁吸引住了，Octopress是基于Jellyll的静态页面博客，使用Markdown来生成页面也省了很多排版的琐事。</p>

<p>接下来讲一下基本步骤</p>

<h3>创建</h3>

<p>首先你必须要安装了<a href="http://git-scm.com/">Git</a><br/>
其次，如果没有rbenv的话也需要安装，这是在osx下安装的命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew update
</span><span class='line'>brew install rbenv
</span><span class='line'>brew install ruby-build</span></code></pre></td></tr></table></div></figure>


<p>
然后照以下步骤初始创建博客</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span><span class='line'>bundle install
</span><span class='line'>rake install # 安装Octopress默认主题</span></code></pre></td></tr></table></div></figure>


<p>
值得注意的是由于访问<a href="https://rubygems.org">https://rubygems.org</a> 不稳定，如果在运行bundle install出现资源获取问题时，建议把Gemfile的source指向 <a href="http://ruby.taobao.org">http://ruby.taobao.org</a> 的镜像就可以解决问题了</p>

<h3>发布</h3>

<p>这一步就是把刚刚建立的博客发布到Github Pages上<br/>
首先你要在Github上创建一个repo，命名规则是<code>username.github.io</code><br/>
接着就可以运行<code>rake setup_github_pages</code>，它会帮你设置好一切配置  <br/>
<code>rake generate</code>会把生成的静态博客拷贝到<code>_deploy/</code>里<br/>
<code>rake preview</code>可在本地4000端口下预览<br/>
<code>rake deploy</code>会把<code>_deploy/</code>里的内容push到master分支里，发布成功！<br/>
<strong>但是</strong>最后别忘了commit你的source code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h3>基本操作</h3>

<p>这里大致写一下博客的一些基本操作命令</p>

<h5>新建文章</h5>

<p><code>rake new_post["title"]</code>可以新建一篇文章存于<code>source/_posts</code>文件夹下，文章的命名格式为<code>YYYY-MM-DD-post-title.markdown</code>，其中日期能帮助博客文章的排序</p>

<h5>新建板块</h5>

<p><code>rake new_page[super-awesome]</code>会为你在导航栏创建一个新的板块</p>

<p>那基本就介绍到这里了 希望能有所帮助</p>
]]></content>
  </entry>
  
</feed>
